rules = [
  {"left": "Program", "right": ["Declaration-list"]},
  {"left": "Declaration-list", "right": ["Declaration", "Declaration-list", "EPSILON"]},
  {"left": "Declaration", "right": ["Declaration-initial", "Declaration-prime"]},
  {"left": "Declaration-initial", "right": ["Type-specifier", "ID"]},
  {"left": "Declaration-prime", "right": ["Fun-declaration-prime", "Var-declaration-prime"]},
  {"left": "Var-declaration-prime", "right": [";", "[", "NUM", "]", ";", "EPSILON"]},
  {"left": "Fun-declaration-prime", "right": ["(", "Params", ")", "Compound-stmt"]},
  {"left": "Type-specifier", "right": ["int", "void", "EPSILON"]},
  {"left": "Params", "right": ["int", "ID", "Param-prime", "Param-list", "void", "EPSILON"]},
  {"left": "Param-list", "right": [",", "Param", "Param-list", "EPSILON"]},
  {"left": "Param", "right": ["Declaration-initial", "Param-prime"]},
  {"left": "Param-prime", "right": ["[", "]", "EPSILON"]},
  {"left": "Compound-stmt", "right": ["{", "Declaration-list", "Statement-list", "}"]},
  {"left": "Statement-list", "right": ["Statement", "Statement-list", "EPSILON"]},
  {"left": "Statement", "right": ["Expression-stmt", "Compound-stmt", "Selection-stmt", "Iteration-stmt", "Return-stmt"]},
  {"left": "Expression-stmt", "right": ["Expression", ";", "break", ";", ";", "EPSILON"]},
  {"left": "Selection-stmt", "right": ["if", "(", "Expression", ")", "Statement", "else", "Statement"]},
  {"left": "Iteration-stmt", "right": ["repeat", "Statement", "until", "(", "Expression", ")"]},
  {"left": "Return-stmt", "right": ["return", "Return-stmt-prime"]},
  {"left": "Return-stmt-prime", "right": [";", "Expression", ";", "EPSILON"]},
  {"left": "Expression", "right": ["Simple-expression-zegond", "ID", "B"]},
  {"left": "B", "right": ["=", "Expression", "[", "Expression", "]", "H", "Simple-expression-prime", "EPSILON"]},
  {"left": "H", "right": ["=", "Expression", "G", "D", "C", "EPSILON"]},
  {"left": "Simple-expression-zegond", "right": ["Additive-expression-zegond", "C"]},
  {"left": "Simple-expression-prime", "right": ["Additive-expression-prime", "C"]},
  {"left": "C", "right": ["Relop", "Additive-expression", "EPSILON"]},
  {"left": "Relop", "right": ["<", "==", "EPSILON"]},
  {"left": "Additive-expression", "right": ["Term", "D"]},
  {"left": "Additive-expression-prime", "right": ["Term-prime", "D"]},
  {"left": "Additive-expression-zegond", "right": ["Term-zegond", "D"]},
  {"left": "D", "right": ["Addop", "Term", "D", "EPSILON"]},
  {"left": "Addop", "right": ["+", "-", "EPSILON"]},
  {"left": "Term", "right": ["Factor", "G"]},
  {"left": "Term-prime", "right": ["Factor-prime", "G"]},
  {"left": "Term-zegond", "right": ["Factor-zegond", "G"]},
  {"left": "G", "right": ["*", "Factor", "G", "EPSILON"]},
  {"left": "Factor", "right": ["(", "Expression", ")", "ID", "Var-call-prime", "NUM", "EPSILON"]},
  {"left": "Var-call-prime", "right": ["(", "Args", ")", "Var-prime", "EPSILON"]},
  {"left": "Var-prime", "right": ["[", "Expression", "]", "EPSILON"]},
  {"left": "Factor-prime", "right": ["(", "Args", ")", "EPSILON"]},
  {"left": "Factor-zegond", "right": ["(", "Expression", ")", "NUM", "EPSILON"]},
  {"left": "Args", "right": ["Arg-list", "EPSILON"]},
  {"left": "Arg-list", "right": ["Expression", "Arg-list-prime"]},
  {"left": "Arg-list-prime", "right": [",", "Expression", "Arg-list-prime", "EPSILON"]}
]

firsts_sets = { 
  'Program': [ 'int' ],
  'Declaration-list': [ 'int' ],
  'Declaration': [ 'int' ],
  'Declaration-initial': [ 'int' ],
  'Declaration-prime': [ '(' ],
  'Var-declaration-prime': [ ';' ],
  'Fun-declaration-prime': [ '(' ],
  'Type-specifier': [ 'int' ],
  'Params': [ 'int' ],
  'Param-list': [ ',' ],
  'Param': [ 'int' ],
  'Param-prime': [ '[' ],
  'Compound-stmt': [ '{' ],
  'Statement-list': [ '(' ],
  'Statement': [ '(' ],
  'Expression-stmt': [ '(' ],
  'Selection-stmt': [ 'if' ],
  'Iteration-stmt': [ 'repeat' ],
  'Return-stmt': [ 'return' ],
  'Return-stmt-prime': [ ';' ],
  'Expression': [ '(' ],
  'B': [ '=' ],
  'H': [ '=' ],
  'Simple-expression-zegond': [ '(' ],
  'Simple-expression-prime': [ '(' ],
  'C': [ '<' ],
  'Relop': [ '<' ],
  'Additive-expression': [ '(' ],
  'Additive-expression-prime': [ '(' ],
  'Additive-expression-zegond': [ '(' ],
  'D': [ '+' ],
  'Addop': [ '+' ],
  'Term': [ '(' ],
  'Term-prime': [ '(' ],
  'Term-zegond': [ '(' ],
  'G': [ '*' ],
  'Factor': [ '(' ],
  'Var-call-prime': [ '(' ],
  'Var-prime': [ '[' ],
  'Factor-prime': [ '(' ],
  'Factor-zegond': [ '(' ],
  'Args': [ '(' ],
  'Arg-list': [ '(' ],
  'Arg-list-prime': [ ',' ] 
  }

follow_sets = {
  'Program': [ '\u0000' ],
  'Declaration-list': [ '\u0000', 'EPSILON', '(' ],
  'Declaration': [ 'int' ],
  'Declaration-initial': [ '(', '[' ],
  'Declaration-prime': [ 'int' ],
  'Var-declaration-prime': [ 'int' ],
  'Fun-declaration-prime': [ ';' ],
  'Type-specifier': [ 'ID' ],
  'Params': [ ')' ],
  'Param-list': [ 'void', 'EPSILON' ],
  'Param': [ ',' ],
  'Param-prime': [ ',' ],
  'Compound-stmt': [ ';', 'if' ],
  'Statement-list': [ '}', 'EPSILON' ],
  'Statement': [ '(', 'else', 'repeat', 'until' ],
  'Expression-stmt': [ '{' ],
  'Selection-stmt': [ 'repeat' ],
  'Iteration-stmt': [ 'return' ],
  'Return-stmt': [ '(', 'else', 'repeat', 'until' ],
  'Return-stmt-prime': [ '(', 'else', 'repeat', 'until' ],
  'Expression': [ ';', ')', '[', ']', '*', ',' ],
  'B': [ ';', ')', '[', ']', '*', ',' ],
  'H': [ '(' ],
  'Simple-expression-zegond': [ 'ID' ],
  'Simple-expression-prime': [ 'EPSILON' ],
  'C': [ 'EPSILON', 'ID' ],
  'Relop': [ '(' ],
  'Additive-expression': [ 'EPSILON' ],
  'Additive-expression-prime': [ '<' ],
  'Additive-expression-zegond': [ '<' ],
  'D': [ '<', 'EPSILON' ],
  'Addop': [ '(' ],
  'Term': [ '+' ],
  'Term-prime': [ '+' ],
  'Term-zegond': [ '+' ],
  'G': [ '+', 'EPSILON' ],
  'Factor': [ '*' ],
  'Var-call-prime': [ 'NUM' ],
  'Var-prime': [ 'EPSILON' ],
  'Factor-prime': [ '*' ],
  'Factor-zegond': [ '*' ],
  'Args': [ ')' ],
  'Arg-list': [ 'EPSILON' ],
  'Arg-list-prime': [ 'EPSILON' ] }

predict_sets = {  
  '1': [ 'int' ],
  '2': [ 'int' ],
  '3': [ 'int' ],
  '4': [ 'int' ],
  '5': [ '(' ],
  '6': [ ';' ],
  '7': [ '(' ],
  '8': [ 'int' ],
  '9': [ 'int' ],
  '10': [ ',' ],
  '11': [ 'int' ],
  '12': [ '[' ],
  '13': [ '{' ],
  '14': [ '(' ],
  '15': [ '(' ],
  '16': [ '(' ],
  '17': [ 'if' ],
  '18': [ 'repeat' ],
  '19': [ 'return' ],
  '20': [ ';' ],
  '21': [ '(' ],
  '22': [ '=' ],
  '23': [ '=' ],
  '24': [ '(' ],
  '25': [ '(' ],
  '26': [ '<' ],
  '27': [ '<' ],
  '28': [ '(' ],
  '29': [ '(' ],
  '30': [ '(' ],
  '31': [ '+' ],
  '32': [ '+' ],
  '33': [ '(' ],
  '34': [ '(' ],
  '35': [ '(' ],
  '36': [ '*' ],
  '37': [ '(' ],
  '38': [ '(' ],
  '39': [ '[' ],
  '40': [ '(' ],
  '41': [ '(' ],
  '42': [ '(' ],
  '43': [ '(' ],
  '44': [ ',' ] 
  }